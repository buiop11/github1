<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


	<security:http use-expressions="true">
	
		<security:intercept-url pattern="/admin/**"
				access="hasAuthority('USER_ADMIN')"/>
				
		<security:intercept-url pattern="/member/**"
				access="isAuthenticated()" />
				
		<security:intercept-url pattern="/**"
				access="permitAll" />

		 <!-- <security:form-login />  --> <!-- 시큐리티가 제공하는 페이지로 이동  -->
		<security:form-login login-page="/login" 
			
			username-parameter="memId"
    	 	password-parameter="pwd"
			default-target-url="/loginPro" 
			authentication-failure-url="/login?error=true"
			 />
			
		<!-- login 안에 있는거는 controller Mapping 이름임  -->	
		<!-- 허가시(성공시) /loginPro 이동  // default-target-url 이게 성공시 가는거임  -->
		<!-- 개인 페이지로 이동 시에는 따로 지정 가능함.  -->
		
		<security:logout logout-success-url="/main"/> 	<!-- 로그아웃 후 메인페이지로 이동 -->
			
	</security:http>


	<!-- 방법2. DB 방식 : 커넥션 풀 정보를 읽어온다. !!!!  ***erase-credentials="false" : 비밀번호 보이게 해줌 ㅋ -->
	<security:authentication-manager erase-credentials="false">
		<security:authentication-provider>
			<!-- data-source-ref = bean name="dataSource" 와 일치해야함  -->
			<security:jdbc-user-service data-source-ref="dataSource"/>	<!-- security-datasource.xml에서 설정한 bean의 이름갖고 오기 -->
		</security:authentication-provider>
	</security:authentication-manager>




</beans>
